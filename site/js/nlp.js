// Generated by CoffeeScript 1.4.0
(function() {
  var black, calcDeps, colors, curve, debug, debugging, drawDeps, getTokenPositions, halfcircle, halfcircleHeight, handleMsg, host, jq, makeDepBox, maxDepHeight, numSentences, r, sample, send;

  jq = jQuery;

  debugging = false;

  colors = ["hsb(0, .75, .75)", "hsb(.8, .75, .75)", "hsb(.3, .75, .75)", "hsb(.6, .75, .75)", "hsb(.1, .75, .75)"];

  black = "hsb(0,0,0.9)";

  r = -1;

  numSentences = 0;

  makeDepBox = function(w, h) {
    return r = Raphael("sentence" + numSentences, w, h);
  };

  curve = function(x, y, xa, ya, xb, yb, xz, yz, color) {
    var path;
    path = [["M", x, y], ["C", xa, ya, xb, yb, xz, yz]];
    return r.set(r.path(path).attr({
      stroke: color,
      "stroke-width": 4,
      "stroke-linecap": "round"
    }));
  };

  halfcircleHeight = function(x1, x2) {
    var bezierScale, xdelta;
    xdelta = x2 - x1;
    bezierScale = 0.5;
    return xdelta * bezierScale;
  };

  halfcircle = function(x1, x2, y, color, height) {
    return curve(x1, y, x1, y - height, x2, y - height, x2, y, color);
  };

  calcDeps = function(deps, positions) {
    var d, ret, tok1, tok2, y, _i, _j, _len, _len1;
    ret = [];
    for (_i = 0, _len = deps.length; _i < _len; _i++) {
      d = deps[_i];
      if (d[0] > d[1]) {
        d = [d[1], d[0]];
      }
      if (d[0] !== -1) {
        tok1 = positions[d[0]].center;
        tok2 = positions[d[1]].center;
        ret = ret.concat([
          {
            t1: tok1,
            t2: tok2,
            y: -1,
            color: colors[Math.min(4, d[1] - d[0] - 1)],
            height: halfcircleHeight(tok1, tok2)
          }
        ]);
      }
    }
    y = maxDepHeight(ret);
    for (_j = 0, _len1 = ret.length; _j < _len1; _j++) {
      d = ret[_j];
      d.y = y;
    }
    return ret;
  };

  maxDepHeight = function(calculatedDeps) {
    return Math.max.apply(null, calculatedDeps.map(function(d) {
      return d.height;
    }));
  };

  drawDeps = function(calculatedDeps) {
    var d, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = calculatedDeps.length; _i < _len; _i++) {
      d = calculatedDeps[_i];
      _results.push(halfcircle(d.t1, d.t2, d.y, d.color, d.height));
    }
    return _results;
  };

  getTokenPositions = function(sentenceId) {
    var p, positions, tableOffset, _i, _len;
    positions = [];
    tableOffset = jq('table').position().left;
    if (debugging) {
      jq('#holder').first().prepend("<br>tableOffset: " + tableOffset);
    }
    jq('#sentence' + numSentences).find(".token").each(function() {
      return positions = positions.concat([
        {
          left: $(this).position().left + 2 - tableOffset,
          width: $(this).width()
        }
      ]);
    });
    for (_i = 0, _len = positions.length; _i < _len; _i++) {
      p = positions[_i];
      p.center = (p.width / 2) + p.left;
    }
    return positions;
  };

  handleMsg = function(data) {
    var calculatedDeps, jsonStr, posRow, sentHeight, sentWidth, tokPositions, tokenRow, what;
    jsonStr = JSON.stringify(JSON.parse(data));
    what = JSON.parse(data);
    tokenRow = '<tr><td><span class="token">' + (what.tokens.join(' </span></td> <td><span class="token">')) + '</span></td></tr>';
    posRow = '<tr><td><span class="pos">' + (what.pos.join(' </span></td> <td><span class="pos">')) + '</span></td></tr>';
    jq('#sent_list:first').prepend('<li><div id="sentence' + numSentences + '"><br><table cellspacing="5">' + tokenRow + posRow + '</table></div></li>');
    tokPositions = getTokenPositions(numSentences);
    calculatedDeps = calcDeps(what.deps, tokPositions);
    sentWidth = Math.max.apply(null, tokPositions.map(function(p) {
      return p.left + p.width;
    }));
    sentHeight = maxDepHeight(calculatedDeps);
    if (debugging) {
      jq('#holder').first().prepend("width: " + JSON.stringify(sentWidth));
      jq('#holder').first().prepend("height: " + JSON.stringify(sentHeight));
      jq('#holder').first().prepend("calculated deps: " + JSON.stringify(calculatedDeps));
      jq('#holder').first().prepend("token positions: " + JSON.stringify(tokPositions));
      jq('#holder').first().prepend("<br>deps: " + JSON.stringify(what.deps));
    }
    makeDepBox(sentWidth, sentHeight);
    drawDeps(calculatedDeps);
    jq("#sentence" + numSentences).attr("align", "center");
    return numSentences = numSentences + 1;
  };

  host = "http://localhost:8888";

  debug = function(msg) {
    return jq("#debug").html(msg);
  };

  sample = function() {
    var client;
    client = new XMLHttpRequest();
    client.open("GET", host + '/sample/', false);
    client.setRequestHeader("Content-Type", "text/plain");
    client.send('');
    if (client.status === 200) {
      return handleMsg(client.responseText);
    } else {
      return alert('Non 200 server response.');
    }
  };

  send = function(msg) {
    var client;
    client = new XMLHttpRequest();
    client.open("POST", host + '/sentence/', false);
    client.setRequestHeader("Content-Type", "text/plain");
    client.send(msg);
    if (client.status === 200) {
      return handleMsg(client.responseText);
    } else {
      return alert('Non 200 server response.');
    }
  };

  jq("#message").bind('keydown', function() {
    jq("#submit").removeAttr("disabled");
    return jq(this).unbind('keyDown');
  });

  jq("#frm").submit(function(e) {
    e.preventDefault();
    send(this.message.value);
    this.message.value = '';
    return false;
  });

  jq("#tooglr").click(function(e) {
    e.preventDefault();
    toggleConnection();
    return false;
  });

  sample();

}).call(this);
